// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "hiperglm_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// solve_least_sq_via_qr_cpp_eig
List solve_least_sq_via_qr_cpp_eig(const Map<MatrixXd> X, const Map<VectorXd> y);
RcppExport SEXP _hiperglm_solve_least_sq_via_qr_cpp_eig(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(solve_least_sq_via_qr_cpp_eig(X, y));
    return rcpp_result_gen;
END_RCPP
}
// row_subset_matvec_via_transpose
VectorXd row_subset_matvec_via_transpose(const Map<MatrixXd> tA, const Map<VectorXd> v, IntegerVector row_index);
RcppExport SEXP _hiperglm_row_subset_matvec_via_transpose(SEXP tASEXP, SEXP vSEXP, SEXP row_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type tA(tASEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type row_index(row_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(row_subset_matvec_via_transpose(tA, v, row_index));
    return rcpp_result_gen;
END_RCPP
}
// col_subset_matvec
VectorXd col_subset_matvec(const Map<MatrixXd> tA, const Map<VectorXd> v, IntegerVector col_index);
RcppExport SEXP _hiperglm_col_subset_matvec(SEXP tASEXP, SEXP vSEXP, SEXP col_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type tA(tASEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type v(vSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type col_index(col_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(col_subset_matvec(tA, v, col_index));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hiperglm_solve_least_sq_via_qr_cpp_eig", (DL_FUNC) &_hiperglm_solve_least_sq_via_qr_cpp_eig, 2},
    {"_hiperglm_row_subset_matvec_via_transpose", (DL_FUNC) &_hiperglm_row_subset_matvec_via_transpose, 3},
    {"_hiperglm_col_subset_matvec", (DL_FUNC) &_hiperglm_col_subset_matvec, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_hiperglm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
